{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACbO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8BAA8B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2CAA2C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6CAA6C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;ACzaO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpC6C;AACM;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAW;AAClC,yBAAyB,kDAAO,mBAAmB,mBAAmB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxFA;AACyD;AACjB;AACjC;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAM;AACjC,oCAAoC,kEAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;;;ACxC4B;AACY;AACQ;AACY;AAC1B;AACE;AACD;AAC5B,oBAAoB,2CAAM;AACjC;AACA;AACA;AACA,YAAY,2CAAY,KAAK,2CAAM;AACnC;AACA;AACA,YAAY,gFAA0B;AACtC,YAAY,2CAAY,KAAK,6CAAO;AACpC;AACA,uBAAuB,gEAAU;AACjC,oBAAoB,iEAAW;AAC/B,0BAA0B,gEAAU;AACpC,oBAAoB,gEAAU;AAC9B,mBAAmB,mEAAa;AAChC,8BAA8B,gEAAU;AACxC,sBAAsB,mEAAa;AACnC,sBAAsB,mEAAa;AACnC,QAAQ,oEAAc;AACtB,QAAQ,oEAAc;AACtB,QAAQ,oEAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAA2B;AACnC,wBAAwB,wDAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;AChD4B;AACoB;AACZ;AACD;AAC5B,qBAAqB,2CAAM;AAClC;AACA;AACA;AACA,YAAY,2CAAY,KAAK,6CAAO;AACpC;AACA;AACA,YAAY,sDAAuB;AACnC;AACA;AACA,uBAAuB,gEAAU;AACjC,oBAAoB,iEAAW;AAC/B,8BAA8B,gEAAU;AACxC,sBAAsB,mEAAa;AACnC,sBAAsB,mEAAa;AACnC,QAAQ,oEAAc;AACtB,QAAQ,oEAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC5B4B;AACkC;AACxB;AACU;AACY;AAC1B;AACE;AACD;AAC5B,sBAAsB,2CAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,yDAAoB,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,yDAAoB,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sources":["webpack://space-garden/./src/Config.ts","webpack://space-garden/./src/JMGE/JMTween.ts","webpack://space-garden/./src/components/domui/InfoPanel.ts","webpack://space-garden/./src/components/domui/TimerCircle.ts","webpack://space-garden/./src/data/Cards.ts","webpack://space-garden/./src/index.ts","webpack://space-garden/./src/pages/EndUI.ts","webpack://space-garden/./src/pages/MainUI.ts","webpack://space-garden/./src/pages/RoundUI.ts","webpack://space-garden/./src/pages/ScoreUI.ts","webpack://space-garden/./src/pages/SetupUI.ts","webpack://space-garden/./src/pages/_BaseUI.ts","webpack://space-garden/./src/services/ElementFactory.ts","webpack://space-garden/./src/services/GameController.ts","webpack://space-garden/webpack/bootstrap","webpack://space-garden/webpack/runtime/define property getters","webpack://space-garden/webpack/runtime/hasOwnProperty shorthand","webpack://space-garden/webpack/runtime/make namespace object","webpack://space-garden/webpack/before-startup","webpack://space-garden/webpack/startup","webpack://space-garden/webpack/after-startup"],"sourcesContent":["export const SessionData = {\r\n    players: [],\r\n    cardChoice: 'Random',\r\n    gameStructure: 'Round Robin',\r\n    gameLength: 'Play Twice',\r\n    characterDeck: [],\r\n    powerDeck: [],\r\n};\r\nexport const RoundData = {\r\n    round: 0,\r\n    players: [],\r\n    cards: [[], []],\r\n    winner: null,\r\n};\r\n","export class JMTween {\r\n    constructor(object, totalTime = 200) {\r\n        this.object = object;\r\n        this.totalTime = totalTime;\r\n        this.running = false;\r\n        this.properties = [];\r\n        this.onUpdate = (callback) => {\r\n            this.onUpdateCallback = callback;\r\n            return this;\r\n        };\r\n        this.onComplete = (callback) => {\r\n            this.onCompleteCallback = callback;\r\n            return this;\r\n        };\r\n        this.onWaitComplete = (callback) => {\r\n            this.onWaitCompleteCallback = callback;\r\n            return this;\r\n        };\r\n        this.yoyo = (b = true, repeat = 1) => {\r\n            this._Yoyo = b;\r\n            this._Repeat = repeat - 0.5;\r\n            return this;\r\n        };\r\n        this.loop = (b = true, repeat = Infinity) => {\r\n            this._Loop = b;\r\n            this._Repeat = repeat;\r\n            return this;\r\n        };\r\n        this.stop = (andComplete) => {\r\n            if (andComplete) {\r\n                this.complete(this.endTime);\r\n            }\r\n            else {\r\n                this.running = false;\r\n                JMTween._remove(this);\r\n            }\r\n            return this;\r\n        };\r\n        this.reset = () => {\r\n            this.tickThis = this.firstTick;\r\n            if (this.waitTime)\r\n                this.hasWait = true;\r\n            return this;\r\n        };\r\n        this.wait = (time) => {\r\n            this.waitTime = time;\r\n            this.hasWait = true;\r\n            return this;\r\n        };\r\n        this.over = (time) => {\r\n            this.totalTime = time;\r\n            return this;\r\n        };\r\n        this.start = () => {\r\n            this.running = true;\r\n            this.properties.forEach(property => {\r\n                if (property.to || property.to === 0) {\r\n                    // @ts-ignore\r\n                    property.start = this.object[property.key] || 0;\r\n                    property.end = property.to;\r\n                }\r\n                else if (property.from || property.from === 0) {\r\n                    property.start = property.from;\r\n                    // @ts-ignore\r\n                    property.end = this.object[property.key] || 0;\r\n                }\r\n                if (property.isColor) {\r\n                    property.incR = Math.floor(property.end / 0x010000) - Math.floor(property.start / 0x010000);\r\n                    property.incG = Math.floor((property.end % 0x010000) / 0x000100) - Math.floor((property.start % 0x010000) / 0x000100);\r\n                    property.incB = Math.floor(property.end % 0x000100) - Math.floor(property.start % 0x000100);\r\n                }\r\n                else {\r\n                    property.inc = property.end - property.start;\r\n                }\r\n                // @ts-ignore\r\n                this.object[property.key] = property.start;\r\n            });\r\n            JMTween._add(this);\r\n            return this;\r\n        };\r\n        this.to = (props, eased = true) => {\r\n            for (let key of Object.keys(props)) {\r\n                // @ts-ignore\r\n                this.properties.push({ key, eased, to: props[key] });\r\n            }\r\n            return this;\r\n        };\r\n        this.from = (props, eased = true) => {\r\n            for (let key of Object.keys(props)) {\r\n                // @ts-ignore\r\n                this.properties.push({ key, eased, from: props[key] });\r\n            }\r\n            return this;\r\n        };\r\n        this.colorTo = (props, eased = true) => {\r\n            for (let key of Object.keys(props)) {\r\n                // @ts-ignore\r\n                this.properties.push({ key, eased, to: props[key], isColor: true });\r\n            }\r\n            return this;\r\n        };\r\n        this.colorFrom = (props, eased = true) => {\r\n            for (let key of Object.keys(props)) {\r\n                // @ts-ignore\r\n                this.properties.push({ key, eased, from: props[key], isColor: true });\r\n            }\r\n            return this;\r\n        };\r\n        this.easing = (func) => {\r\n            this._Easing = func;\r\n            return this;\r\n        };\r\n        this.complete = (time) => {\r\n            this.properties.forEach(property => {\r\n                // @ts-ignore\r\n                this.object[property.key] = property.end;\r\n            });\r\n            if (this._Loop && this._Repeat > 0) {\r\n                this._Repeat--;\r\n                this.reset();\r\n                this.startTime = time;\r\n                this.endTime = this.startTime + (this.totalTime || 0);\r\n            }\r\n            else if (this._Yoyo && this._Repeat > 0) {\r\n                this._Repeat -= 0.5;\r\n                this.reverseProps();\r\n                this.startTime = time;\r\n                this.endTime = this.startTime + (this.totalTime || 0);\r\n            }\r\n            else {\r\n                this.running = false;\r\n                JMTween._remove(this);\r\n                this.tickThis = () => { };\r\n                if (this.onCompleteCallback)\r\n                    this.onCompleteCallback(this.object);\r\n                if (this.nextTween) {\r\n                    this.nextTween.reset();\r\n                    this.nextTween.start();\r\n                    this.nextTween.tickThis(time);\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n        this.firstTick = (time) => {\r\n            if (this.hasWait) {\r\n                this.startTime = time + this.waitTime / (JMTween.speedFactor || 1);\r\n            }\r\n            else {\r\n                this.startTime = time;\r\n            }\r\n            this.endTime = this.startTime + (this.totalTime / (JMTween.speedFactor || 1) || 0);\r\n            this.tickThis = this.tailTick;\r\n        };\r\n        this.tailTick = (time) => {\r\n            if (this.hasWait && time > this.startTime) {\r\n                this.hasWait = false;\r\n                if (this.onWaitCompleteCallback)\r\n                    this.onWaitCompleteCallback(this.object);\r\n            }\r\n            if (time > this.endTime) {\r\n                this.complete(time);\r\n            }\r\n            else if (time > this.startTime) {\r\n                let raw = (time - this.startTime) / (this.endTime - this.startTime);\r\n                let eased = this._Easing ? this._Easing(raw) : raw;\r\n                this.properties.forEach(property => {\r\n                    let percent = property.eased ? eased : raw;\r\n                    if (property.isColor) {\r\n                        // @ts-ignore\r\n                        this.object[property.key] = Math.round(property.start +\r\n                            Math.floor(property.incR * percent) * 0x010000 +\r\n                            Math.floor(property.incG * percent) * 0x000100 +\r\n                            Math.floor(property.incB * percent));\r\n                    }\r\n                    else {\r\n                        // @ts-ignore\r\n                        this.object[property.key] = property.start + property.inc * percent;\r\n                    }\r\n                });\r\n                if (this.onUpdateCallback)\r\n                    this.onUpdateCallback(this.object);\r\n            }\r\n        };\r\n        this.reverseProps = () => {\r\n            this.properties.forEach(property => {\r\n                let start = property.start;\r\n                property.start = property.end;\r\n                property.end = start;\r\n                if (property.isColor) {\r\n                    property.incR = Math.floor(property.end / 0x010000) - Math.floor(property.start / 0x010000);\r\n                    property.incG = Math.floor((property.end % 0x010000) / 0x000100) - Math.floor((property.start % 0x010000) / 0x000100);\r\n                    property.incB = Math.floor(property.end % 0x000100) - Math.floor(property.start % 0x000100);\r\n                }\r\n                else {\r\n                    property.inc = property.end - property.start;\r\n                }\r\n            });\r\n        };\r\n        this.tickThis = this.firstTick;\r\n    }\r\n    chain(nextObj, totalTime) {\r\n        this.nextTween = new JMTween(nextObj, totalTime);\r\n        return this.nextTween;\r\n    }\r\n    chainTween(tween) {\r\n        this.nextTween = tween;\r\n        return tween;\r\n    }\r\n}\r\nJMTween.speedFactor = 1;\r\nJMTween.running = false;\r\nJMTween.tweens = [];\r\nJMTween._add = (tween) => {\r\n    JMTween.tweens.push(tween);\r\n    JMTween._tryRun();\r\n};\r\nJMTween._remove = (tween) => {\r\n    let index = JMTween.tweens.indexOf(tween);\r\n    if (index >= 0) {\r\n        JMTween.tweens.splice(index, 1);\r\n    }\r\n};\r\nJMTween._tryRun = () => {\r\n    if (!JMTween.running && JMTween.tweens.length > 0) {\r\n        JMTween.running = true;\r\n        requestAnimationFrame(JMTween._tick);\r\n    }\r\n};\r\nJMTween._tick = (time) => {\r\n    JMTween.running = false;\r\n    JMTween.tweens.forEach(tween => tween.tickThis(time));\r\n    if (!JMTween.running && JMTween.tweens.length > 0) {\r\n        JMTween.running = true;\r\n        requestAnimationFrame(JMTween._tick);\r\n    }\r\n};\r\nexport const JMEasing = {\r\n    Linear: {\r\n        None: (k) => {\r\n            return k;\r\n        },\r\n    },\r\n    Quadratic: {\r\n        In: (k) => {\r\n            return k * k;\r\n        },\r\n        Out: (k) => {\r\n            return k * (2 - k);\r\n        },\r\n        InOut: (k) => {\r\n            k *= 2;\r\n            if (k < 1) {\r\n                return 0.5 * k * k;\r\n            }\r\n            return -0.5 * (--k * (k - 2) - 1);\r\n        },\r\n    },\r\n    Cubic: {\r\n        In: (k) => {\r\n            return k * k * k;\r\n        },\r\n        Out: (k) => {\r\n            return --k * k * k + 1;\r\n        },\r\n        InOut: (k) => {\r\n            k *= 2;\r\n            if (k < 1) {\r\n                return 0.5 * k * k * k;\r\n            }\r\n            return 0.5 * ((k -= 2) * k * k + 2);\r\n        },\r\n    },\r\n    Quartic: {\r\n        In: (k) => {\r\n            return k * k * k * k;\r\n        },\r\n        Out: (k) => {\r\n            return 1 - (--k * k * k * k);\r\n        },\r\n        InOut: (k) => {\r\n            k *= 2;\r\n            if (k < 1) {\r\n                return 0.5 * k * k * k * k;\r\n            }\r\n            return -0.5 * ((k -= 2) * k * k * k - 2);\r\n        },\r\n    },\r\n    Quintic: {\r\n        In: (k) => {\r\n            return k * k * k * k * k;\r\n        },\r\n        Out: (k) => {\r\n            return --k * k * k * k * k + 1;\r\n        },\r\n        InOut: (k) => {\r\n            k *= 2;\r\n            if (k < 1) {\r\n                return 0.5 * k * k * k * k * k;\r\n            }\r\n            return 0.5 * ((k -= 2) * k * k * k * k + 2);\r\n        },\r\n    },\r\n    Sinusoidal: {\r\n        In: (k) => {\r\n            return 1 - Math.cos(k * Math.PI / 2);\r\n        },\r\n        Out: (k) => {\r\n            return Math.sin(k * Math.PI / 2);\r\n        },\r\n        InOut: (k) => {\r\n            return 0.5 * (1 - Math.cos(Math.PI * k));\r\n        },\r\n    },\r\n    Exponential: {\r\n        In: (k) => {\r\n            return k === 0 ? 0 : Math.pow(1024, k - 1);\r\n        },\r\n        Out: (k) => {\r\n            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\r\n        },\r\n        InOut: (k) => {\r\n            if (k === 0) {\r\n                return 0;\r\n            }\r\n            if (k === 1) {\r\n                return 1;\r\n            }\r\n            k *= 2;\r\n            if (k < 1) {\r\n                return 0.5 * Math.pow(1024, k - 1);\r\n            }\r\n            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\r\n        },\r\n    },\r\n    Circular: {\r\n        In: (k) => {\r\n            return 1 - Math.sqrt(1 - k * k);\r\n        },\r\n        Out: (k) => {\r\n            return Math.sqrt(1 - (--k * k));\r\n        },\r\n        InOut: (k) => {\r\n            k *= 2;\r\n            if (k < 1) {\r\n                return -0.5 * (Math.sqrt(1 - k * k) - 1);\r\n            }\r\n            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\r\n        },\r\n    },\r\n    Elastic: {\r\n        In: (k) => {\r\n            if (k === 0) {\r\n                return 0;\r\n            }\r\n            if (k === 1) {\r\n                return 1;\r\n            }\r\n            return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\r\n        },\r\n        Out: (k) => {\r\n            if (k === 0) {\r\n                return 0;\r\n            }\r\n            if (k === 1) {\r\n                return 1;\r\n            }\r\n            return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\r\n        },\r\n        InOut: (k) => {\r\n            if (k === 0) {\r\n                return 0;\r\n            }\r\n            if (k === 1) {\r\n                return 1;\r\n            }\r\n            k *= 2;\r\n            if (k < 1) {\r\n                return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\r\n            }\r\n            return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\r\n        },\r\n    },\r\n    Back: {\r\n        In: (k) => {\r\n            let s = 1.70158;\r\n            return k * k * ((s + 1) * k - s);\r\n        },\r\n        Out: (k) => {\r\n            let s = 1.70158;\r\n            return --k * k * ((s + 1) * k + s) + 1;\r\n        },\r\n        InOut: (k) => {\r\n            let s = 1.70158 * 1.525;\r\n            k *= 2;\r\n            if (k < 1) {\r\n                return 0.5 * (k * k * ((s + 1) * k - s));\r\n            }\r\n            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\r\n        },\r\n    },\r\n    Bounce: {\r\n        In: (k) => {\r\n            return 1 - JMEasing.Bounce.Out(1 - k);\r\n        },\r\n        Out: (k) => {\r\n            if (k < (1 / 2.75)) {\r\n                return 7.5625 * k * k;\r\n            }\r\n            else if (k < (2 / 2.75)) {\r\n                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\r\n            }\r\n            else if (k < (2.5 / 2.75)) {\r\n                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\r\n            }\r\n            else {\r\n                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\r\n            }\r\n        },\r\n        InOut: (k) => {\r\n            if (k < 0.5) {\r\n                return JMEasing.Bounce.In(k * 2) * 0.5;\r\n            }\r\n            return JMEasing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\r\n        },\r\n    },\r\n};\r\n","export class InfoPanel {\r\n    constructor() {\r\n        this.destroy = () => {\r\n            document.body.removeChild(this.element);\r\n        };\r\n        this.element = document.createElement('div');\r\n        this.element.classList.add('info-panel');\r\n        document.body.appendChild(this.element);\r\n        let top = document.createElement('div');\r\n        top.classList.add('top');\r\n        this.element.appendChild(top);\r\n        top.innerHTML = `\r\n    <div class=\"info-title\">Instructions</div>\r\n    <div class=\"info-subtitle\">How To Play</div>`;\r\n        this.contentElement = document.createElement('div');\r\n        this.contentElement.classList.add('info-content');\r\n        top.appendChild(this.contentElement);\r\n        this.contentElement.innerHTML = 'Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum ';\r\n        let button = document.createElement('button');\r\n        button.classList.add('close-button');\r\n        this.element.appendChild(button);\r\n        button.innerHTML = 'X';\r\n        button.addEventListener('click', () => this.hidden = true);\r\n        this.hidden = true;\r\n    }\r\n    get hidden() {\r\n        return this.element.style.display === 'none';\r\n    }\r\n    set hidden(b) {\r\n        if (b) {\r\n            this.element.style.display = 'none';\r\n        }\r\n        else {\r\n            this.element.style.removeProperty('display');\r\n        }\r\n    }\r\n}\r\n","import { JMTween } from '../../JMGE/JMTween';\r\nimport { El } from '../../services/ElementFactory';\r\nexport class TimerCircle {\r\n    constructor() {\r\n        this.endNow = () => {\r\n            console.log('a');\r\n            this.tween.stop(true);\r\n        };\r\n        this.onUpdate = () => {\r\n            this.element.innerHTML = Math.ceil(this.currentSeconds).toString();\r\n        };\r\n        this.element = El.makeText('99', 'timer');\r\n        this.tween = new JMTween(this, 99000).to({ currentSeconds: 0 })\r\n            .onComplete(() => this._onComplete())\r\n            .onUpdate(this.onUpdate);\r\n    }\r\n    reset(seconds) {\r\n        if (seconds) {\r\n            this.totalSeconds = seconds;\r\n        }\r\n        this.currentSeconds = this.totalSeconds;\r\n        this.element.innerHTML = this.currentSeconds.toString();\r\n        this.tween.reset();\r\n        this.tween.over(this.totalSeconds * 1000);\r\n        return this;\r\n    }\r\n    start() {\r\n        this.tween.start();\r\n        return this;\r\n    }\r\n    pause() {\r\n        this.tween.stop();\r\n    }\r\n    onComplete(func) {\r\n        this._onComplete = func;\r\n        return this;\r\n    }\r\n}\r\n","export const Cards = {\r\n    Characters: [\r\n        'Human',\r\n        'Mouse',\r\n        'Elephant',\r\n        'Cat',\r\n        'Wolf',\r\n        'Anaconda',\r\n        'Tiger',\r\n        'Amoeba',\r\n        'Poison Frog',\r\n        'Tardigrade',\r\n        'Great White Shark',\r\n        'Blue Whale',\r\n        'Goat',\r\n        'Mosquito',\r\n        'Fire Dragon',\r\n        'Pegasus',\r\n        'T-Rex',\r\n        'Gorilla',\r\n        'Satan',\r\n        'Zeus',\r\n        'Venus Fly Trap',\r\n        'Covid Particle',\r\n        'Raven',\r\n        'Bat',\r\n        'Grizzly Bear',\r\n        'Rabbit',\r\n        'Scorpion/Lobster',\r\n        'Cerberus?',\r\n        'Electric Eel',\r\n        'Armadillo or Porcupine',\r\n        'Giraffe',\r\n        'Hippopotamus',\r\n        'Moose',\r\n        'Swarm of Wasps',\r\n        'Koala',\r\n        'Badger',\r\n        'Seal',\r\n        'Ant Army',\r\n        'Ghost',\r\n        'Alien',\r\n        'Robot',\r\n        'Wizard',\r\n    ],\r\n    Powers: [\r\n        'x100 Size',\r\n        'Ant size',\r\n        'Travel at Speed of Light',\r\n        'Superman Strength',\r\n        'X1000 clones',\r\n        'Teleport',\r\n        'Bazooka',\r\n        'Katana',\r\n        'Thumbtack',\r\n        'Rocketship',\r\n        'Hammer (Mjolnir)',\r\n        'Jet Pack',\r\n        'Mech Suit',\r\n        'Ninja Stars',\r\n        'Super Brain (Mojo jojo)',\r\n        'Wildcard (hi-tech device)',\r\n        'Forcefield',\r\n        'Elemental Powers (Fire/Water/Air/Earth)',\r\n        'Weather Control',\r\n        'Gravity Control',\r\n        'Swiss Army Knife',\r\n        'Laser Beam?',\r\n        'Fighter Jet',\r\n        'Concert Speakers',\r\n        'Pan of Bacon Grease',\r\n        'Summoning (any object)',\r\n        'Anvil? Anchor?',\r\n        'Grenade',\r\n        'Regenerating Body',\r\n        'Psychic',\r\n        'Shapeshifting',\r\n        'Counter??',\r\n        'Irresistible Cuteness',\r\n        'Jeff Bezo’s Credit Card',\r\n        'Time Control',\r\n        'Wolverine Claws',\r\n        '9 lives',\r\n        'Invisibility',\r\n        'Chainsaw',\r\n        'Super Lucky',\r\n        'Bear Trap',\r\n    ],\r\n};\r\n","var _a;\r\nimport { InfoPanel } from './components/domui/InfoPanel';\r\nimport { MainUI } from './pages/MainUI';\r\nexport let interactionMode = 'desktop';\r\nexport let Facade = new (_a = class FacadeInner {\r\n        constructor() {\r\n            console.warn = (a) => { };\r\n            if (FacadeInner.exists)\r\n                throw new Error('Cannot instatiate more than one Facade Singleton.');\r\n            FacadeInner.exists = true;\r\n            try {\r\n                document.createEvent('TouchEvent');\r\n                interactionMode = 'mobile';\r\n            }\r\n            catch (e) {\r\n            }\r\n            // Setup PIXI\r\n            this.element = document.getElementById('main');\r\n            this.navTo(new MainUI());\r\n            this.instructions = new InfoPanel();\r\n            // FontLoader.load(FontArray).then(() => console.log('Fonts Loaded'));\r\n            // let fonts: string[] = _.map(Fonts);\r\n            // // load fonts then preloader!\r\n            // // window.requestAnimationFrame(() => FontLoader.load(fonts).then(this.init));\r\n            // window.requestAnimationFrame(() => this.init());\r\n        }\r\n        navTo(nextPage) {\r\n            if (this.currentPage) {\r\n                this.currentPage.navOut();\r\n            }\r\n            this.element.innerHTML = '';\r\n            this.currentPage = nextPage;\r\n            this.element.appendChild(nextPage.element);\r\n            nextPage.navIn();\r\n        }\r\n        showInstructions() {\r\n            this.instructions.hidden = false;\r\n        }\r\n    },\r\n    _a.exists = false,\r\n    _a)();\r\n","import { Facade } from '..';\r\nimport { SessionData } from '../Config';\r\nimport { El } from '../services/ElementFactory';\r\nimport { GameController } from '../services/GameController';\r\nimport { MainUI } from './MainUI';\r\nimport { RoundUI } from './RoundUI';\r\nimport { BaseUI } from './_BaseUI';\r\nexport class EndUI extends BaseUI {\r\n    constructor() {\r\n        super();\r\n        this.navHome = () => {\r\n            Facade.navTo(new MainUI());\r\n        };\r\n        this.navGame = () => {\r\n            GameController.restartGame();\r\n            Facade.navTo(new RoundUI());\r\n        };\r\n        this.element = El.makeDiv('end-ui');\r\n        let title = El.makeText(`Game Over`, 'title');\r\n        let mainSection = El.makeDiv('content');\r\n        let table = El.makeDiv('table-container');\r\n        let home = El.makeButton('Home', 'home-button', this.navHome);\r\n        let buttonContainer = El.makeDiv('button-box');\r\n        let button1 = El.makeButton('Main Menu', 'info-button', this.navHome);\r\n        let button2 = El.makeButton('Play Again!', 'info-button', this.navGame);\r\n        El.addElements(this.element, title, mainSection, buttonContainer, home);\r\n        El.addElements(mainSection, table);\r\n        El.addElements(buttonContainer, button1, button2);\r\n        let tableInner = document.createElement('table');\r\n        tableInner.classList.add('leaderboard');\r\n        table.appendChild(tableInner);\r\n        let head = tableInner.createTHead();\r\n        let row = head.insertRow();\r\n        let th0 = document.createElement('th');\r\n        let th1 = document.createElement('th');\r\n        th0.appendChild(document.createTextNode('Name'));\r\n        th1.appendChild(document.createTextNode('Score'));\r\n        row.appendChild(th0);\r\n        row.appendChild(th1);\r\n        SessionData.players.forEach((el, i) => {\r\n            let score = SessionData.players[i].score;\r\n            row = tableInner.insertRow();\r\n            let cell = row.insertCell();\r\n            cell.appendChild(document.createTextNode(el.slug));\r\n            cell = row.insertCell();\r\n            cell.appendChild(document.createTextNode(score.toString()));\r\n        });\r\n    }\r\n}\r\n","import { Facade } from '..';\r\nimport { El } from '../services/ElementFactory';\r\nimport { SetupUI } from './SetupUI';\r\nimport { BaseUI } from './_BaseUI';\r\nexport class MainUI extends BaseUI {\r\n    constructor() {\r\n        super();\r\n        this.navigateStart = () => {\r\n            Facade.navTo(new SetupUI());\r\n        };\r\n        this.openInstructions = () => {\r\n            Facade.showInstructions();\r\n            // new InfoPopup('Instruction!');\r\n        };\r\n        this.element = El.makeDiv('main-ui');\r\n        let title = El.makeText('Who Will Win?', 'title');\r\n        let buttonContainer = El.makeDiv('button-box');\r\n        let button1 = El.makeButton('New Game', 'info-button', this.navigateStart);\r\n        let button2 = El.makeButton('Instructions', 'info-button', this.openInstructions);\r\n        El.addElements(buttonContainer, button1, button2);\r\n        El.addElements(this.element, title, buttonContainer);\r\n    }\r\n    navIn() {\r\n    }\r\n    navOut() {\r\n    }\r\n    destroy() {\r\n    }\r\n}\r\n","import { Facade } from '..';\r\nimport { TimerCircle } from '../components/domui/TimerCircle';\r\nimport { RoundData } from '../Config';\r\nimport { El } from '../services/ElementFactory';\r\nimport { GameController } from '../services/GameController';\r\nimport { MainUI } from './MainUI';\r\nimport { ScoreUI } from './ScoreUI';\r\nimport { BaseUI } from './_BaseUI';\r\nexport class RoundUI extends BaseUI {\r\n    constructor() {\r\n        super();\r\n        this.paused = false;\r\n        this.phaseIntro = () => {\r\n            this.bottomTitle.innerHTML = 'Who Will Win?';\r\n            this.bottomText.innerHTML = 'Get ready to fight...';\r\n            this.timer.reset(10).onComplete(this.phaseLeftPlay).start();\r\n        };\r\n        this.phaseLeftPlay = () => {\r\n            this.bottomTitle.innerHTML = `${RoundData.players[0]}'s Turn!`;\r\n            this.bottomText.innerHTML = `\r\n      - Tell us about your character<br>\r\n      - What can you do?<br>\r\n      - What do you do?<br>\r\n      - How do you beat your foe?`;\r\n            this.timer.reset(15).onComplete(this.phaseRightPlay).start();\r\n        };\r\n        this.phaseRightPlay = () => {\r\n            this.bottomTitle.innerHTML = `${RoundData.players[1]}'s Turn!`;\r\n            this.bottomText.innerHTML = `\r\n      - Tell us about your character<br>\r\n      - What can you do?<br>\r\n      - What do you do?<br>\r\n      - How do you respond to your foe?`;\r\n            this.timer.reset(15).onComplete(this.phaseVote).start();\r\n        };\r\n        this.phaseVote = () => {\r\n            this.bottomTitle.innerHTML = `Who will win?`;\r\n            this.bottomText.innerHTML = `Cast your vote!`;\r\n            this.leftVote.style.removeProperty('display');\r\n            this.rightVote.style.removeProperty('display');\r\n            this.timer.reset(60).onComplete(this.navEnd).start();\r\n        };\r\n        this.navHome = () => {\r\n            Facade.navTo(new MainUI());\r\n        };\r\n        this.navEnd = () => {\r\n            RoundData.winner = this.winner || 0;\r\n            GameController.scorePlayer(RoundData.players[RoundData.winner]);\r\n            Facade.navTo(new ScoreUI());\r\n        };\r\n        this.pauseTimer = () => {\r\n            this.paused = !this.paused;\r\n            if (this.paused) {\r\n                this.pauseButton.innerHTML = 'resume';\r\n                this.timer.pause();\r\n            }\r\n            else {\r\n                this.pauseButton.innerHTML = 'pause';\r\n                this.timer.start();\r\n            }\r\n        };\r\n        this.element = El.makeDiv('round-ui');\r\n        let round = ++RoundData.round;\r\n        GameController.resetRound();\r\n        RoundData.players[0] = GameController.selectPlayer();\r\n        RoundData.players[1] = GameController.selectPlayer();\r\n        RoundData.cards[0][0] = GameController.selectCharacter();\r\n        RoundData.cards[1][0] = GameController.selectCharacter();\r\n        RoundData.cards[0][1] = GameController.selectPower();\r\n        RoundData.cards[1][1] = GameController.selectPower();\r\n        let title = El.makeText(`Round ${round}`, 'title');\r\n        let topSection = El.makeDiv('round-top');\r\n        let bottomSection = El.makeDiv('round-bottom');\r\n        this.leftSection = El.makeDiv('player-section');\r\n        this.rightSection = El.makeDiv('player-section');\r\n        let leftCards = El.makeDiv('card-section');\r\n        let rightCards = El.makeDiv('card-section');\r\n        this.bottomTitle = El.makeText('Who Will Win?', 'title');\r\n        this.bottomText = El.makeText('Get ready to fight...', 'big-text');\r\n        let leftName = El.makeText(RoundData.players[0], 'name-title');\r\n        let rightName = El.makeText(RoundData.players[1], 'name-title');\r\n        let leftCard1 = El.makeDiv('card');\r\n        let leftCard2 = El.makeDiv('card');\r\n        let rightCard1 = El.makeDiv('card');\r\n        let rightCard2 = El.makeDiv('card');\r\n        leftCard1.innerHTML = RoundData.cards[0][0];\r\n        leftCard2.innerHTML = RoundData.cards[0][1];\r\n        rightCard1.innerHTML = RoundData.cards[1][0];\r\n        rightCard2.innerHTML = RoundData.cards[1][1];\r\n        let vs = El.makeText('vs', 'title');\r\n        let home = El.makeButton('Home', 'home-button', this.navHome);\r\n        let voteContainer = El.makeDiv('vote-container');\r\n        this.leftVote = El.makeButton(`${RoundData.players[0]} Wins`, 'vote-button', () => this.setWinner(0));\r\n        this.rightVote = El.makeButton(`${RoundData.players[1]} Wins`, 'vote-button', () => this.setWinner(1));\r\n        this.leftVote.style.display = 'none';\r\n        this.rightVote.style.display = 'none';\r\n        this.timer = new TimerCircle();\r\n        this.skipButton = El.makeButton('skip', 'small-button', this.timer.endNow);\r\n        this.pauseButton = El.makeButton('pause', 'small-button', this.pauseTimer);\r\n        El.addElements(this.element, title, topSection, bottomSection, home, this.timer.element);\r\n        El.addElements(topSection, this.leftSection, vs, this.rightSection);\r\n        El.addElements(bottomSection, this.bottomTitle, this.bottomText, voteContainer);\r\n        El.addElements(this.leftSection, leftName, leftCards);\r\n        El.addElements(this.rightSection, rightName, rightCards);\r\n        El.addElements(leftCards, leftCard1, leftCard2);\r\n        El.addElements(rightCards, rightCard1, rightCard2);\r\n        El.addElements(voteContainer, this.leftVote, this.rightVote);\r\n        El.addElements(bottomSection, this.skipButton, this.pauseButton);\r\n        this.phaseIntro();\r\n    }\r\n    setWinner(player) {\r\n        if (this.winner === player)\r\n            return;\r\n        this.winner = player;\r\n        if (player === 0) {\r\n            this.leftVote.classList.add('highlighted');\r\n            this.rightVote.classList.remove('highlighted');\r\n        }\r\n        else {\r\n            this.rightVote.classList.add('highlighted');\r\n            this.leftVote.classList.remove('highlighted');\r\n        }\r\n    }\r\n}\r\n","import { Facade } from '..';\r\nimport { TimerCircle } from '../components/domui/TimerCircle';\r\nimport { RoundData, SessionData } from '../Config';\r\nimport { El } from '../services/ElementFactory';\r\nimport { GameController } from '../services/GameController';\r\nimport { EndUI } from './EndUI';\r\nimport { MainUI } from './MainUI';\r\nimport { RoundUI } from './RoundUI';\r\nimport { BaseUI } from './_BaseUI';\r\nexport class ScoreUI extends BaseUI {\r\n    constructor() {\r\n        super();\r\n        this.paused = false;\r\n        this.navHome = () => {\r\n            Facade.navTo(new MainUI());\r\n        };\r\n        this.navGame = () => {\r\n            if (GameController.isGameOver()) {\r\n                Facade.navTo(new EndUI());\r\n            }\r\n            else {\r\n                Facade.navTo(new RoundUI());\r\n            }\r\n        };\r\n        this.pauseTimer = () => {\r\n            this.paused = !this.paused;\r\n            if (this.paused) {\r\n                this.pauseButton.innerHTML = 'resume';\r\n                this.timer.pause();\r\n            }\r\n            else {\r\n                this.pauseButton.innerHTML = 'pause';\r\n                this.timer.start();\r\n            }\r\n        };\r\n        this.element = El.makeDiv('score-ui');\r\n        let round = RoundData.round;\r\n        let player = RoundData.players[RoundData.winner];\r\n        let title = El.makeText(`Round ${round}`, 'title');\r\n        let mainSection = El.makeDiv('content');\r\n        let leftTitle = El.makeText('And the winner is...', 'bigger-text');\r\n        let leftSection = El.makeDiv('left');\r\n        let table = El.makeDiv('table-container');\r\n        let playerSection = El.makeDiv('player-section');\r\n        let playerName = El.makeText(player, 'name-title');\r\n        let playerCards = El.makeDiv('card-section');\r\n        let card1 = El.makeDiv('card');\r\n        let card2 = El.makeDiv('card');\r\n        card1.innerHTML = RoundData.cards[RoundData.winner][0];\r\n        card2.innerHTML = RoundData.cards[RoundData.winner][1];\r\n        let home = El.makeButton('Home', 'home-button', this.navHome);\r\n        this.timer = new TimerCircle();\r\n        this.skipButton = El.makeButton('skip', 'small-button', this.timer.endNow);\r\n        this.pauseButton = El.makeButton('pause', 'small-button', this.pauseTimer);\r\n        El.addElements(this.element, title, mainSection, home, this.timer.element);\r\n        El.addElements(mainSection, leftSection, table);\r\n        El.addElements(leftSection, leftTitle, playerSection, this.skipButton, this.pauseButton);\r\n        El.addElements(playerSection, playerName, playerCards);\r\n        El.addElements(playerCards, card1, card2);\r\n        this.timer.reset(10).onComplete(this.navGame).start();\r\n        let tableInner = document.createElement('table');\r\n        tableInner.classList.add('leaderboard');\r\n        table.appendChild(tableInner);\r\n        let head = tableInner.createTHead();\r\n        let row = head.insertRow();\r\n        let th0 = document.createElement('th');\r\n        let th1 = document.createElement('th');\r\n        th0.appendChild(document.createTextNode('Name'));\r\n        th1.appendChild(document.createTextNode('Score'));\r\n        row.appendChild(th0);\r\n        row.appendChild(th1);\r\n        SessionData.players.forEach((el, i) => {\r\n            let score = SessionData.players[i].score;\r\n            row = tableInner.insertRow();\r\n            let cell = row.insertCell();\r\n            cell.appendChild(document.createTextNode(el.slug));\r\n            cell = row.insertCell();\r\n            cell.appendChild(document.createTextNode(score.toString()));\r\n        });\r\n    }\r\n}\r\n","import { Facade } from '..';\r\nimport { SessionData } from '../Config';\r\nimport { El } from '../services/ElementFactory';\r\nimport { GameController } from '../services/GameController';\r\nimport { MainUI } from './MainUI';\r\nimport { RoundUI } from './RoundUI';\r\nimport { BaseUI } from './_BaseUI';\r\nexport class SetupUI extends BaseUI {\r\n    constructor() {\r\n        super();\r\n        this.names = [];\r\n        this.navHome = () => {\r\n            Facade.navTo(new MainUI());\r\n        };\r\n        this.navGame = () => {\r\n            this.updatePlayers();\r\n            Facade.navTo(new RoundUI());\r\n        };\r\n        this.addNameElement = (name) => {\r\n            let el = this.makeNameElement();\r\n            this.nameContainer.appendChild(el.element);\r\n            this.nameContainer.appendChild(this.addButton);\r\n            this.names.push(el);\r\n            if (name)\r\n                el.input.value = name;\r\n            return el;\r\n        };\r\n        this.removeNameElement = (el) => {\r\n            if (this.names.length <= 1)\r\n                return;\r\n            this.nameContainer.removeChild(el.element);\r\n            let i = this.names.indexOf(el);\r\n            this.names.splice(i, 1);\r\n        };\r\n        this.makeNameElement = () => {\r\n            let element = El.makeDiv();\r\n            let input = document.createElement('input');\r\n            input.classList.add('name-element');\r\n            let m = { input, element };\r\n            let deleteB = El.makeButton('X', 'delete-button', () => this.removeNameElement(m));\r\n            element.appendChild(deleteB);\r\n            El.addElements(element, input, deleteB);\r\n            return m;\r\n        };\r\n        this.updatePlayers = () => {\r\n            GameController.resetSession(this.names.map(el => el.input.value));\r\n        };\r\n        this.element = El.makeDiv('setup-ui');\r\n        let title = El.makeText(`Game Setup`, 'title');\r\n        let middle = El.makeDiv('horizontal-stack');\r\n        let leftSection = El.makeDiv('vertical-stack');\r\n        let rightSection = El.makeDiv('vertical-stack');\r\n        this.nameContainer = leftSection;\r\n        let leftHeader = El.makeText('Players:', 'sub-title');\r\n        let rightHeader = El.makeText('Options:', 'sub-title');\r\n        this.addButton = El.makeButton('Add', 'info-button', () => this.addNameElement());\r\n        let home = El.makeButton('Home', 'home-button', this.navHome);\r\n        let startGame = El.makeButton('Start Game!', 'info-button', this.navGame);\r\n        El.addElements(leftSection, leftHeader, this.addButton);\r\n        El.addElements(rightSection, rightHeader, startGame);\r\n        El.addElements(middle, leftSection, rightSection);\r\n        El.addElements(this.element, title, middle, home);\r\n        leftSection.style.justifyContent = 'flex-start';\r\n        leftSection.style.gap = '10px';\r\n        this.loadNames();\r\n    }\r\n    loadNames() {\r\n        SessionData.players.forEach(el => {\r\n            this.addNameElement(el.slug);\r\n        });\r\n        this.addNameElement();\r\n    }\r\n}\r\n","export class BaseUI {\r\n    navIn() { }\r\n    navOut() { }\r\n    destroy() { }\r\n}\r\n","export const El = {\r\n    makeText: (title, className) => {\r\n        let el = document.createElement('div');\r\n        if (className)\r\n            el.classList.add(className);\r\n        el.innerHTML = title;\r\n        return el;\r\n    },\r\n    makeDiv: (className) => {\r\n        let el = document.createElement('div');\r\n        if (className)\r\n            el.classList.add(className);\r\n        return el;\r\n    },\r\n    makeButton: (title, className, onClick) => {\r\n        let el = document.createElement('button');\r\n        if (className)\r\n            el.classList.add(className);\r\n        el.innerHTML = title;\r\n        el.addEventListener('click', onClick);\r\n        return el;\r\n    },\r\n    addElements(source, ...children) {\r\n        children.forEach(child => source.appendChild(child));\r\n    },\r\n};\r\n","import { RoundData, SessionData } from '../Config';\r\nimport { Cards } from '../data/Cards';\r\nexport const GameController = {\r\n    selectPlayer: () => {\r\n        let minPlay = Math.min(...SessionData.players.map(el => el.plays));\r\n        let pool = SessionData.players.filter(el => el.plays === minPlay && !RoundData.players.includes(el.slug));\r\n        let index = Math.floor(Math.random() * pool.length);\r\n        let player = pool[index];\r\n        player.plays++;\r\n        console.log(SessionData);\r\n        console.log(pool, index, player);\r\n        return player.slug;\r\n    },\r\n    scorePlayer: (name) => {\r\n        let player = SessionData.players.find(el => el.slug === name);\r\n        player.score++;\r\n    },\r\n    resetSession: (players) => {\r\n        SessionData.players = players.filter(el => el !== '').map(slug => ({ slug, score: 0, plays: 0 }));\r\n        console.log(SessionData.players);\r\n        RoundData.round = 0;\r\n        RoundData.players = [];\r\n        RoundData.cards = [[], []];\r\n        RoundData.winner = null;\r\n    },\r\n    selectCharacter: () => {\r\n        if (SessionData.characterDeck.length === 0) {\r\n            Cards.Characters.forEach(card => SessionData.characterDeck.push(card));\r\n        }\r\n        let index = Math.floor(Math.random() * SessionData.characterDeck.length);\r\n        let m = SessionData.characterDeck[index];\r\n        SessionData.characterDeck.splice(index, 1);\r\n        return m;\r\n    },\r\n    selectPower: () => {\r\n        if (SessionData.powerDeck.length === 0) {\r\n            Cards.Powers.forEach(card => SessionData.powerDeck.push(card));\r\n        }\r\n        let index = Math.floor(Math.random() * SessionData.powerDeck.length);\r\n        let m = SessionData.powerDeck[index];\r\n        SessionData.powerDeck.splice(index, 1);\r\n        return m;\r\n    },\r\n    resetRound: () => {\r\n        RoundData.players = [];\r\n        RoundData.cards = [[], []];\r\n        RoundData.winner = null;\r\n    },\r\n    restartGame: () => {\r\n        GameController.resetSession(SessionData.players.map(el => el.slug));\r\n    },\r\n    isGameOver: () => {\r\n        return !SessionData.players.some(el => el.plays < 2);\r\n    },\r\n};\r\nGameController.resetSession([\r\n    'Debbie',\r\n    'Jeremy',\r\n    'Rambo',\r\n    'Josh',\r\n    'Pascal',\r\n    'Bob',\r\n]);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":[],"sourceRoot":""}